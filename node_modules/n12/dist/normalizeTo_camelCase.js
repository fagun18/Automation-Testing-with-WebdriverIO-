"use strict";
/* tslint:disable */
/* TODO: Enable TSLint */
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeTo_camelCase = void 0;
function normalizeTo_camelCase(sentence, __firstLetterCapital) {
    var e_1, _a;
    if (__firstLetterCapital === void 0) { __firstLetterCapital = false; }
    var charType;
    var lastCharType = null;
    var normalizedName = '';
    try {
        for (var sentence_1 = __values(sentence), sentence_1_1 = sentence_1.next(); !sentence_1_1.done; sentence_1_1 = sentence_1.next()) {
            var char = sentence_1_1.value;
            var normalizedChar = void 0;
            if (/^[a-z]$/.test(char)) {
                charType = 'LOWERCASE';
                normalizedChar = char;
            }
            else if (/^[A-Z]$/.test(char)) {
                charType = 'UPPERCASE';
                normalizedChar = char.toLowerCase();
            }
            else if (/^[0-9]$/.test(char)) {
                charType = 'NUMBER';
                normalizedChar = char;
            }
            else {
                charType = 'OTHER';
                normalizedChar = '';
            }
            if (!lastCharType) {
                if (__firstLetterCapital) {
                    normalizedChar = normalizedChar.toUpperCase(); //TODO: DRY
                }
            }
            else if (charType !== lastCharType &&
                !(charType === 'LOWERCASE' && lastCharType === 'UPPERCASE') &&
                !(lastCharType === 'NUMBER') &&
                !(charType === 'NUMBER')) {
                normalizedChar = normalizedChar.toUpperCase(); //TODO: [ðŸŒº] DRY
            }
            normalizedName += normalizedChar;
            lastCharType = charType;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (sentence_1_1 && !sentence_1_1.done && (_a = sentence_1.return)) _a.call(sentence_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return normalizedName;
}
exports.normalizeTo_camelCase = normalizeTo_camelCase;
/**
 * TODO: [ðŸŒº] Use some intermediate util splitWords
 */
//# sourceMappingURL=normalizeTo_camelCase.js.map