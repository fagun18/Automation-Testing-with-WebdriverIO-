"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseKeywords = void 0;
var parseKeywordsFromString_1 = require("./parseKeywordsFromString");
/**
 * Parses keywords from any object and recursively walks through
 *
 * Tip: If you want to parse multiple inputs, just wrap them in an array
 *
 * @param input of any kind
 * @returns {Set} of keywords without diacritics in lowercase
 */
function parseKeywords(input) {
    if (typeof input === 'string') {
        return parseKeywordsFromString_1.parseKeywordsFromString(input);
    }
    else if (typeof input === 'object') {
        if (Array.isArray(input)) {
            return input
                .map(parseKeywords)
                .reduce(function (a, b) { return new Set(__spreadArray(__spreadArray([], __read(a)), __read(b))); }, new Set());
        }
        else if (input === null) {
            return new Set();
        }
        else {
            return parseKeywords(Object.values(input));
        }
    }
    else {
        return new Set();
    }
}
exports.parseKeywords = parseKeywords;
/**
 * Note: Not using spread in input param because of keeping second parameter for options
 * TODO: [ðŸŒº] Use some intermediate util splitWords
 */
//# sourceMappingURL=parseKeywords.js.map