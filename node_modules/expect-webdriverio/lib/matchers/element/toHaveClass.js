import { toHaveAttributeAndValue } from './toHaveAttribute.js';
import { waitUntil, enhanceError, executeCommand, wrapExpectedWithArray, compareText, isAsymmeyricMatcher } from '../../utils.js';
import { DEFAULT_OPTIONS } from '../../constants.js';
async function condition(el, attribute, value, options) {
    const { ignoreCase = false, trim = false, containing = false } = options;
    let attr = await (await el).getAttribute(attribute);
    if (typeof attr !== 'string') {
        return { result: false };
    }
    if (trim) {
        attr = attr.trim();
    }
    if (ignoreCase) {
        attr = attr.toLowerCase();
        if (typeof value === 'string') {
            value = value.toLowerCase();
        }
    }
    if (isAsymmeyricMatcher(value)) {
        return compareText(attr, value, options);
    }
    const classes = attr.split(' ');
    const valueInClasses = classes.some((t) => {
        return value instanceof RegExp
            ? !!t.match(value)
            : containing && typeof value === 'string'
                ? t.includes(value)
                : compareText(t, value, options).result;
    });
    return {
        value: attr,
        result: valueInClasses
    };
}
export function toHaveClass(...args) {
    return toHaveElementClass.call(this || {}, ...args);
}
export async function toHaveElementClass(received, expectedValue, options = DEFAULT_OPTIONS) {
    const isNot = this.isNot;
    const { expectation = 'class', verb = 'have' } = this;
    await options.beforeAssertion?.({
        matcherName: 'toHaveElementClass',
        expectedValue,
        options,
    });
    const attribute = 'class';
    let el = await received;
    let attr;
    const pass = await waitUntil(async () => {
        const result = await executeCommand.call(this, el, condition, options, [attribute, expectedValue, options]);
        el = result.el;
        attr = result.values;
        return result.success;
    }, isNot, options);
    const message = enhanceError(el, wrapExpectedWithArray(el, attr, expectedValue), attr, this, verb, expectation, '', options);
    const result = {
        pass,
        message: () => message
    };
    await options.afterAssertion?.({
        matcherName: 'toHaveElementClass',
        expectedValue,
        options,
        result
    });
    return result;
}
export function toHaveElementClassContaining(...args) {
    return toHaveClassContaining.call(this, ...args);
}
export function toHaveClassContaining(el, className, options = DEFAULT_OPTIONS) {
    return toHaveAttributeAndValue.call(this, el, 'class', className, {
        ...options,
        containing: true
    });
}
