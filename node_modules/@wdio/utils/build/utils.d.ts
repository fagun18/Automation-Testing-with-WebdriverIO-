import type { Options, Services } from '@wdio/types';
export declare function isAbsolute(p: string): boolean;
/**
 * overwrite native element commands with user defined
 * @param {object} propertiesObject propertiesObject
 */
export declare function overwriteElementCommands(propertiesObject: {
    '__elementOverrides__'?: {
        value: any;
    };
    [key: string]: any;
}): void;
/**
 * get command call structure
 * (for logging purposes)
 */
export declare function commandCallStructure(commandName: string, args: any[], unfurl?: boolean): string;
/**
 * transforms WebDriver result for log stream to avoid unnecessary long
 * result strings e.g. if it contains a screenshot
 * @param {object} result WebDriver response body
 */
export declare function transformCommandLogResult(result: {
    file?: string;
    script?: string;
}): "\"<Screenshot[base64]>\"" | "\"<Script[base64]>\"" | {
    file?: string | undefined;
    script?: string | undefined;
};
/**
 * checks if command argument is valid according to specificiation
 *
 * @param  {*}       arg           command argument
 * @param  {Object}  expectedType  parameter type (e.g. `number`, `string[]` or `(number|string)`)
 * @return {Boolean}               true if argument is valid
 */
export declare function isValidParameter(arg: any, expectedType: string): boolean;
/**
 * get type of command argument
 */
export declare function getArgumentType(arg: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "null";
/**
 * Allows to safely require a package, it only throws if the package was found
 * but failed to load due to syntax errors
 * @param  {string} name  of package
 * @return {object}       package content
 */
export declare function safeImport(name: string): Promise<Services.ServicePlugin | null>;
/**
 * is function async
 * @param  {Function} fn  function to check
 * @return {Boolean}      true provided function is async
 */
export declare function isFunctionAsync(fn: Function): boolean;
/**
 * filter out arguments passed to specFn & hookFn, don't allow callbacks
 * as there is no need for user to call e.g. `done()`
 */
export declare function filterSpecArgs(args: any[]): any[];
/**
 * checks if provided string is Base64
 * @param {string} str string to check
 * @return {boolean} `true` if the provided string is Base64
 */
export declare function isBase64(str: string): boolean;
/**
 * sleep
 * @param {number=0} ms number in ms to sleep
 */
export declare const sleep: (ms?: number) => Promise<unknown>;
/**
 * Checks if the provided WebdriverIO capabilities object is related to Appium.
 *
 * @param {WebdriverIO.Capabilities} caps - The capabilities object to check.
 * @returns {boolean} Returns true if the provided capabilities are related to Appium, false otherwise.
*/
export declare function isAppiumCapability(caps: WebdriverIO.Capabilities): boolean;
/**
 * helper method to determine if we need to setup a browser driver
 * which is:
 *   - whenever the user has set connection options that differ
 *     from the default, or a port is set
 *   - whenever the user defines `user` and `key` which later will
 *     update the connection options
 */
export declare function definesRemoteDriver(options: Pick<Options.WebDriver, 'user' | 'key' | 'protocol' | 'hostname' | 'port' | 'path'>): boolean;
export declare function isChrome(browserName?: string): boolean;
export declare function isSafari(browserName?: string): boolean;
export declare function isFirefox(browserName?: string): boolean;
export declare function isEdge(browserName?: string): boolean;
/**
 * traverse up the scope chain until browser element was reached
 */
export declare function getBrowserObject(elem: WebdriverIO.Element | WebdriverIO.Browser): WebdriverIO.Browser;
//# sourceMappingURL=utils.d.ts.map