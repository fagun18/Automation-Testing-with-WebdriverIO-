import split from 'split2';
import { Transform } from 'node:stream';
import { DEBUGGER_MESSAGES } from './constants.js';
export default function runnerTransformStream(cid, inputStream, aggregator) {
    return inputStream
        .pipe(split(/\r?\n/, line => `${line}\n`))
        .pipe(ignore(DEBUGGER_MESSAGES))
        .pipe(map((line) => {
        const newLine = `[${cid}] ${line}`;
        aggregator?.push(newLine);
        return newLine;
    }));
}
function ignore(patternsToIgnore) {
    return new Transform({
        decodeStrings: false,
        transform(chunk, encoding, next) {
            if (patternsToIgnore.some(m => chunk.startsWith(m))) {
                return next();
            }
            return next(null, chunk);
        },
        final(next) {
            this.unpipe();
            next();
        },
    });
}
function map(mapper) {
    return new Transform({
        decodeStrings: false,
        transform(chunk, encoding, next) {
            return next(null, mapper(chunk));
        },
        final(next) {
            this.unpipe();
            next();
        },
    });
}
